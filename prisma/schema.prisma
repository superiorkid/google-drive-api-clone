// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id           String      @id @default(cuid())
  username     String      @unique
  email        String      @unique
  password     String?
  role         Role        @default(USER)
  verifyAt     DateTime?   @map("verify_at")
  lastLoginAt  DateTime?   @map("last_login_at")
  refreshToken String?     @map("refresh_token")
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt() @map("updated_at")
  authTokens   AuthToken[]
  driveItems   DriveItem[]

  @@index([username, email, createdAt])
  @@map("users")
}

model AuthToken {
  id        String        @default(cuid())
  token     String        @unique
  type      AuthTokenType @default(EMAIL_VERIFICATION)
  expiresAt DateTime      @map("expires_at")
  used      Boolean       @default(false)
  usedAt    DateTime?     @map("used_at")
  userId    String        @map("user_id")
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")

  @@index([used, expiresAt, createdAt, type])
  @@map("auth_tokens")
}

enum AuthTokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

enum DriveItemType {
  FILE
  FOLDER
}

// INFO: https://chatgpt.com/c/67f9d34c-761c-800f-a34f-45711efc54d7

model DriveItem {
  id        String        @id @default(cuid())
  name      String
  type      DriveItemType
  size      Int? // in bytes, null for folders
  mimeType  String?       @map("mime_type") // only for files
  url       String? // file URL/path, null for folders
  parentId  String?       @map("parent_id")
  parent    DriveItem?    @relation("FolderContents", fields: [parentId], references: [id])
  children  DriveItem[]   @relation("FolderContents")
  ownerId   String        @map("owner_id")
  owner     User          @relation(fields: [ownerId], references: [id])
  deletedAt DateTime?     @map("deleted_at")
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")

  @@index([ownerId, parentId, deletedAt])
  @@map("drive_items")
}
